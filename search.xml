<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[浏览器解析url过程]]></title>
      <url>http://yoursite.com/2017/05/03/brower-behavior/</url>
      <content type="html"><![CDATA[<h2 id="过程概述"><a href="#过程概述" class="headerlink" title="过程概述"></a>过程概述</h2><blockquote>
<ol>
<li><a href="http://imweb.io/topic/55e3ba46771670e207a16bc8" target="_blank" rel="external">DNS域名解析过程</a></li>
<li>TCP发起请求,建立请求,接收数据，关闭请求</li>
<li>浏览器渲染</li>
</ol>
</blockquote>
<h2 id="DNS域名解析过程"><a href="#DNS域名解析过程" class="headerlink" title="DNS域名解析过程"></a>DNS域名解析过程</h2><blockquote>
<p><strong><em>DNS协议</em></strong></p>
<p>DNS数据库是域名和IP地址相互映射的一个分布式数据库，DNS协议用来将域名转换为IP地址，它运行在UDP协议之上，为什么选择UDP而非TCP？原因如下：UDP无需连接，时效性更好，进行一次查询只需要两个DNS包。而TCP需要先用3个包建立连接，再用2个DNS包进行查询，最后用4个包断开连接，连接成本远大于查询本身，容易让DNS服务器不堪重负。</p>
</blockquote>
<h3 id="1-查找浏览器缓存"><a href="#1-查找浏览器缓存" class="headerlink" title="1. 查找浏览器缓存"></a>1. 查找浏览器缓存</h3><blockquote>
<p>当在浏览器中输入url并回车之后，浏览器会首先检查自己的缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，解析结束。</p>
<p>浏览器缓存域名也是有限制的，不仅浏览器缓存大小有限制，而且缓存时间也有限制，例如chrome浏览器，通过地址：chrome://net-internals/#dns可以查看dns缓存情况，默认cache大小是1000，时间是1分钟，当启用dns代理时，DNS将全部失效</p>
<p>浏览器的缓存时间太长或者太短都不好，如果时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致域名不能正常解析，这段时间用户可能无法访问网站，如果时间设置太短，会导致用户每次访问网站都会重新解析一次域名</p>
</blockquote>
<h3 id="2-查找系统缓存"><a href="#2-查找系统缓存" class="headerlink" title="2. 查找系统缓存"></a>2. 查找系统缓存</h3><blockquote>
<p>如果用户的浏览器缓存中没有，浏览器会查找操作系统中是否有这个域名对应的DNS解析结果。其实操作系统也会有一个域名解析的过程，在Windows中可以通过 <strong><em>C:\Windows\System32\drivers\etc\hosts</em></strong> 文件来配置，你可以将任何域名解析到任何能够访问的IP地址。例如我们在测试时可以将一个域名解析到一台测试服务器上，这样不用修改热呢代码就能测试到单独服务器上的代码业务逻辑是否正确的。正是因为这种本地DNS解析的规程，所以黑客就有可能通过修改你的域名解析成把特定的域名解析到指定的IP地址上，导致这些域名被劫持。</p>
<ul>
<li>在微软windows下，你可以用命令 ipconfig /flushdns 来清空dns 缓存内容。你也可以用命令 ipconfig /displaydns 来查看dns 缓存内容。</li>
</ul>
<ul>
<li>在Mac OSX中，你可以用这个命令lookupd -flushcache来清空保留的缓存.bash-2.05a$ lookupd -flushcache</li>
</ul>
<ul>
<li>在Linux中，nscd进程负责管理DNS缓存。要清空DNS缓存，重启nscd 守护进程就行了。</li>
</ul>
</blockquote>
<h3 id="3-查找路由器缓存"><a href="#3-查找路由器缓存" class="headerlink" title="3. 查找路由器缓存"></a>3. 查找路由器缓存</h3><blockquote>
<p>如果系统缓存中也找不到，那么查询请求就会发向路由器，它一般会有自己的DNS缓存。</p>
</blockquote>
<h3 id="4-查找ISP-DNS缓存"><a href="#4-查找ISP-DNS缓存" class="headerlink" title="4. 查找ISP DNS缓存"></a>4. 查找ISP DNS缓存</h3><blockquote>
<p>运气实在不好，就只能查询ISP DNS 缓存服务器了。在我们的网络配置中都会有”DNS服务器地址”这一项，操作系统会把这个域名发送给这里设置的DNS，也就是本地区域名服务器，通常是提供给你接入互联网的应用提供商。这个专门的域名解析服务器性能都会很好，它们一般都会缓存解析结果，当然缓存的时间是受域名的失效时间控制的，一般缓存空间不是影响缓存失效的主要因素。大约80%的域名解析都到这就已经完成了，所以ISP DNS主要承担了域名解析工作。</p>
<p>ISP的DNS缓存时间一般是1个小时。前后2次间隔1个小时的话，他就去域名的DNS上重新取得数据。这里说的是最近一次和当前的比较，也就是说如果时间差距较大，就重新去域名的DNS服务器上找。所以不用刷新就变得很有必要，否则缓存了一次并且域名记录修改了以后，ISP就永远不用去找新记录了。知道了这个原理以后，大家就会明白，为什么原来没有的记录注册并生效很快，修改的话生效会很慢。就是因为缓存的原因。但是如果没有缓存，访问的效率会很低，因为任何一次输入www.zzndns.com都得跑到NS1.ZZNDNS.COM、NS2.ZZNDNS.COM去查询记录。</p>
<ul>
<li>很多域名商的域名解析系统也不是实时刷新的。一般会设置一定的时间，比如20分钟。就是说，你设置了一个新的A记录以后，域名服务器会在20分钟内为你添加。目的就是为了节约服务器资源，怕客户DNS不断的刷新记录。因为刷新记录肯定需要消耗一定的资源，而且刷新过程中是不能解析的。另外刷新过程大概需要消耗5秒钟，就是说这个5秒钟内域名商的DNS是不能用的。</li>
</ul>
</blockquote>
<h3 id="5-递归搜索"><a href="#5-递归搜索" class="headerlink" title="5. 递归搜索"></a>5. 递归搜索</h3><blockquote>
<p>最无奈的情况发生了，在前面都没有办法命中DNS缓存的情况下，</p>
<ol>
<li>本地DNS服务器即将该请求转发到互联网上的根域 （即一个完整的域名最后面的那个点，通常省略不写）。</li>
<li>根域将所要查询域名中的顶级域(假设要查询ke.qq.com，该域名的顶级域就是com)的服务器IP地址返回到本地DNS。</li>
<li>本地DNS根据返回的IP地址，再向顶级域(就是com域)发送请求。</li>
<li>com域服务器再将域名中的二级域(即ke.qq.com中的qq)的IP地址返回给本地DNS。</li>
<li>本地DNS再向二级域发送请求进行查询。</li>
<li>之后不断重复这样的过程，直到本地DNS服务器得到最终的查询结果，并返回到主机。这时候主机才能通过域名访问该网站。</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p><strong><em> 扩展：<a href="http://blog.chinaunix.net/uid-28216282-id-3757849.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-28216282-id-3757849.html</a> </em></strong></p>
</blockquote>
<h2 id="TCP发起请求-建立请求"><a href="#TCP发起请求-建立请求" class="headerlink" title="TCP发起请求,建立请求"></a>TCP发起请求,建立请求</h2><h3 id="1-TCP为什么需要三次握手建立连接"><a href="#1-TCP为什么需要三次握手建立连接" class="headerlink" title="1. TCP为什么需要三次握手建立连接"></a>1. <a href="http://blog.csdn.net/hacker00011000/article/details/52319111" target="_blank" rel="external">TCP为什么需要三次握手建立连接</a></h3><blockquote>
<p>前两次比较容易理解，第三次握手看似多余其实不然，这主要是为了防止已失效的请求报文段突然又传送到了服务器端而产生连接的误判。比如：客户端发送了一个连接请求报文段A到服务器端，但是在某些网络节点上时间滞留了，而后客户端又超时重发了一个连接请求报文段B到服务端，而后正常建立连接，数据传输完毕，并释放了连接。但是请求报文段A延迟了一段时间后，又到了服务器，这本是一个早已失效的报文段，但是服务器收到后会误以为客户端又发送了一次连接请求，于是向客户端发送确认报文段，并同意建立连接。如果这里没有三次握手，这时服务端只要发送了确认，新的连接就建立了，但是由于客户端没有发送这样的建立连接请求，因此不会理会服务端的确认，也不会向服务端发送数据，而服务端却认为新的连接已经建立了，并在一直等待客户端发送数据，这样服务端就会一直等待下去，直到超出保活计数器的设定值，而将客户端判定为出了问题，才会关闭这个连接。这样就浪费了很多服务器的资源。而如果采用三次握手，客户端就不会向服务端发出确认，服务端由于收不到确认，就知道客户端没有要求建立连接，从而不建立该连接。</p>
</blockquote>
<h3 id="2-TCP为什么需要四次握手关闭连接"><a href="#2-TCP为什么需要四次握手关闭连接" class="headerlink" title="2. TCP为什么需要四次握手关闭连接"></a>2. <a href="http://blog.csdn.net/hacker00011000/article/details/52319111" target="_blank" rel="external">TCP为什么需要四次握手关闭连接</a></h3><blockquote>
<p>当Server收到Client的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端<br>收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端收到FIN报文。</p>
</blockquote>
<hr>
<p><strong><em> TCP和UDP的区别</em></strong></p>
<table>
<thead>
<tr>
<th>区别</th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否连接</td>
<td>面向连接</td>
<td>面向非连接</td>
</tr>
<tr>
<td>传输可靠性</td>
<td>可靠的</td>
<td>不可靠的</td>
</tr>
<tr>
<td>应用场合</td>
<td>传输大量的数据</td>
<td>少量数据</td>
</tr>
<tr>
<td>速度</td>
<td>慢</td>
<td>快</td>
</tr>
</tbody>
</table>
<h2 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a><a href="http://coolshell.cn/articles/9666.html" target="_blank" rel="external">浏览器渲染</a></h2><p>###浏览器渲染的大致流程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析HTML构建DOM树 --&gt; 渲染树构建 --&gt; 渲染树布局 --&gt;  绘制渲染树</span><br></pre></td></tr></table></figure>
<h4 id="1-解析DOM树"><a href="#1-解析DOM树" class="headerlink" title="1. 解析DOM树"></a>1. 解析DOM树</h4><blockquote>
<ul>
<li>HTML会被解析成DOM树</li>
<li>css 解析成CSS规则树</li>
<li>javascript 主要通过DOM API和 CSSOM API来操作DOM Tree 和 CSS Rule Tree</li>
</ul>
</blockquote>
<h4 id="2-构建渲染树"><a href="#2-构建渲染树" class="headerlink" title="2. 构建渲染树"></a>2. 构建渲染树</h4><p>解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree.</p>
<blockquote>
<ul>
<li>Rendering Tree 渲染树并不等同于DOM树，因为一些像Header或者display:none的东西就没有必要放在渲染树中了。</li>
</ul>
</blockquote>
<h4 id="3-渲染树布局"><a href="#3-渲染树布局" class="headerlink" title="3. 渲染树布局"></a>3. 渲染树布局</h4><blockquote>
<ul>
<li><p>CSS的Rule Tree主要是为了完成匹配并把 CSS Rule 附加上 Rendering Tree上的每个Element。也就是DOM节点。也就是所谓的Frame。</p>
</li>
<li><p>然后，计算每个Frame(也就是每个Element)的位置，这又叫layout和reflow过程</p>
</li>
</ul>
</blockquote>
<h4 id="4-绘制渲染树"><a href="#4-绘制渲染树" class="headerlink" title="4. 绘制渲染树"></a>4. 绘制渲染树</h4><p>通过调用操作系统Native GUI的API绘制。</p>
<p><strong><em>注意点</em></strong></p>
<blockquote>
<p>下面这些动作有很大可能会是成本比较高的。</p>
<ol>
<li>当你增加、删除、修改DOM结点时，会导致Reflow或Repaint</li>
<li>当你移动DOM的位置，或是搞个动画的时候。</li>
<li>当你修改CSS样式的时候。</li>
<li>当你Resize窗口的时候（移动端没有这个问题），或是滚动的时候。</li>
<li>当你修改网页的默认字体时。</li>
</ol>
</blockquote>
<p><strong><em>减少reflow/repaint </em></strong></p>
<blockquote>
<ol>
<li><p>不要一条一条地修改DOM的样式。与其这样，还不如预先定义好css的class，然后修改DOM的className。</p>
</li>
<li><p>把DOM离线后修改。</p>
<blockquote>
<ol>
<li>使用documentFragment 对象在内存里操作DOM</li>
<li>先把DOM给display:none(有一次reflow)，然后你想怎么改就怎么改。比如修改100次，然后再把他显示出来。</li>
<li>clone一个DOM结点到内存里，然后想怎么改就怎么改，改完后，和在线的那个的交换一下。</li>
</ol>
</blockquote>
</li>
<li><p>不要把DOM结点的属性值放在一个循环里当成循环里的变量。不然这会导致大量地读写这个结点的属性。</p>
</li>
<li><p>尽可能的修改层级比较低的DOM。当然，改变层级比较底的DOM有可能会造成大面积的reflow，但是也可能影响范围很小。</p>
</li>
<li><p>为动画的HTML元件使用fixed或absoult的position，那么修改他们的CSS是不会reflow的。</p>
</li>
<li><p>千万不要使用table布局。因为可能很小的一个小改动会造成整个table的重新布局。</p>
</li>
</ol>
</blockquote>
<p>参考资料</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[B端优化数据加载优化]]></title>
      <url>http://yoursite.com/2017/03/23/optimize/</url>
      <content type="html"><![CDATA[<h2 id="浏览器访问过程"><a href="#浏览器访问过程" class="headerlink" title="浏览器访问过程"></a>浏览器访问过程</h2><p>   <a href="http://liufengvling@github.io" target="_blank" rel="external">请看我另一篇文章</a></p>
<h3 id="优化原则"><a href="#优化原则" class="headerlink" title="优化原则"></a>优化原则</h3><blockquote>
<ul>
<li>减少http请求数量</li>
<li>减少数据传输量大小</li>
<li>减少数据的响应时间</li>
<li>先css，后内容，最后js动作</li>
<li>延迟加载</li>
</ul>
</blockquote>
<h3 id="A-减少http请求数量的方法"><a href="#A-减少http请求数量的方法" class="headerlink" title="A. 减少http请求数量的方法"></a>A. 减少http请求数量的方法</h3><ol>
<li>使用浏览器缓存,web中的css，js，图片等静态资源更新的频率都比较低，而这些文件几乎是每次访问页面都需要的，如果能把这些内容缓存到浏览器中，减少http请求量，能很好的提升性能。</li>
</ol>
<blockquote>
<p>设置http头中的cache-control和expires的属性，可使文件缓存，如果想替换缓存可通过变更url请求地址（修改文件名或者加时间参数等）</p>
</blockquote>
<ol>
<li>合并js，css，图片等资源,把图片base64编码放入页面减少http请求（弊端：正文加载变慢，一般不这样），例如：把多个js文件合并成。</li>
</ol>
<blockquote>
<p>java项目中使用的合并压缩 <strong>JAWR</strong></p>
</blockquote>
<h3 id="B-减少数据传输量大小"><a href="#B-减少数据传输量大小" class="headerlink" title="B. 减少数据传输量大小"></a>B. 减少数据传输量大小</h3><ol>
<li>使用gzip压缩传输<br>在服务器端对文件进行压缩，在浏览器端进行解压，文本文件压缩率在80%以上，所以开启对html，css，js进行gzip压缩传输，可有效减少数据量，但是这样会增加服务器和浏览器的压缩和解压运算量。</li>
</ol>
<ol>
<li><p>对js和css进行压缩<br>这个压缩是指对js，css等，通过去除空行，空格，换行符，注释，变量名混淆等方式减少文件大小。如果在此基础上进行gzip压缩传输，数据量可以更。</p>
</li>
<li><p>减少cookie来回传播<br>由于cookie会随着http请求来回的穿，所以cookie的内容不宜过多，如果有数据需要存在浏览器端，可以考虑浏览器 <strong>session storage</strong>。同时对于静态资源，cookie没什么用，可以放在不同的域名下，这样cookie就不会跟着了。</p>
</li>
</ol>
<h3 id="C-减少数据的响应时间"><a href="#C-减少数据的响应时间" class="headerlink" title="C. 减少数据的响应时间"></a>C. 减少数据的响应时间</h3><ol>
<li>通过CDN，把数据放在距离用户较近的服务器上，可以缩短网络链路，加快网络访问。</li>
<li>通过dns-prefetch 提升页面载入速度，dns-prefetch或者x-dns-prefetch-control会提前预加载dns内容，这样当用户点击预加载过的链接内容时省去了dns解析的时间，直接在cache中找到了。</li>
</ol>
<p>&gt;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"x-dns-prefetch-control"</span> content=<span class="string">"on"</span> /&gt;</span><br><span class="line"><span class="comment">//或者使用link标签来强制对DNS做预解析</span></span><br><span class="line">&lt;link rel=<span class="string">"dns-prefetch"</span> href=<span class="string">"http://ke.qq.com/"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="D-先css，后内容，最后js动作"><a href="#D-先css，后内容，最后js动作" class="headerlink" title="D. 先css，后内容，最后js动作"></a>D. 先css，后内容，最后js动作</h3><p>浏览器首先请求html正文，然后从上到下依次解析html文档，在前面的文件将会被先加载，加载完后再向下解析html文件。将css文件放到html头部，这样可以避免先渲染body后，再加载css渲染，导致一开始内容错乱，页面闪烁。js事件不影响视觉，最后加载。</p>
<h3 id="E-延迟加载"><a href="#E-延迟加载" class="headerlink" title="E. 延迟加载"></a>E. 延迟加载</h3><ol>
<li>当html准备好后，通过js方法加载资源。例如在所有资源加载完在加载图片</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**document.ready 是dom树加载完，并不一定所有资源都加载完</span><br><span class="line">*  window.onload  是在所有资源都加载完的动作</span><br><span class="line">*/</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//加载广告</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt;scri'</span>+<span class="string">'pt src="http://www.jb51.net/ad.js"&gt;&lt;/s'</span>+<span class="string">'cript&gt;'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>自加载需要的资源<br>例如js，有两种方式，第一种把所有js压缩合并到几个文件，然后缓存到浏览器；第二种，只把全局性的js缓存到浏览器，然后各自页面按需加载少量js，一般这两种方式都可以。</li>
</ol>
<hr>
<blockquote>
<ul>
<li>扩展：<a href="https://developers.google.com/speed/docs/insights/rules?csw=1" target="_blank" rel="external">https://developers.google.com/speed/docs/insights/rules?csw=1</a></li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第一篇博客]]></title>
      <url>http://yoursite.com/2017/03/23/hello-world/</url>
      <content type="html"><![CDATA[<p>从今天起，开始写博客了，从开始敲这第一篇博客就感觉不一样了，之前看到大神说过，写博客更多的意义在于提升自己的地位，而我的目标在于找到自己与大神们的差距，身临其境，写出东西来，才能对比出距离，选择大于努力，这也许是一种努力的捷径。</p>
<p>希望这第一篇博客成为一个印记，能勉励我前进，加油！</p>
]]></content>
    </entry>
    
  
  
</search>
